// Code generated by go-bindata.
// sources:
// ui/assets/index.js
// ui/assets/style.css
// ui/index.html
// DO NOT EDIT!

package server

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _uiAssetsIndexJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4d\x8b\xe2\x40\x10\xbd\xe7\x57\x14\x59\xd0\x08\x6e\x74\x97\xbd\x49\x8e\xb2\x1e\x74\x0e\x2a\xc3\x5c\x9b\x4e\xa9\xcd\x24\xd5\xb1\xbb\x3a\x8e\x0c\xf9\xef\x43\xe7\xa3\x75\xc4\xc3\xd4\x21\x84\xca\x7b\xaf\x5e\xbd\xca\xc1\x91\x64\xa5\x09\x8e\xc8\x5b\x41\xb9\x2e\x5f\x44\x89\xaf\x0a\x2f\xc9\x04\x3e\x23\x00\x80\x5a\x18\x30\x78\x76\x68\x19\x32\x20\xbc\xc0\xdb\x66\xbd\x62\xae\xb6\x5d\x33\x99\x2c\x5a\x5c\x8f\x49\x35\x19\x14\xf9\xd5\xb2\x60\x94\x27\x41\x47\x84\x0c\x86\x39\x41\xd5\x97\x3a\x40\xc2\x27\x65\xd3\x96\xb0\xf3\x04\xc8\xb2\x0c\xfe\xc1\x68\x04\xed\x07\x2f\xe2\x6c\xdb\xfc\x3b\x9f\xdf\x73\x07\x67\x58\x60\x89\xe4\x9d\xe5\x5a\x3a\xff\x9a\x9e\x1d\x9a\xeb\x0e\x0b\x94\xac\x4d\x12\xff\x32\xed\x5e\xbf\x49\x94\x18\xf7\x5e\x87\xea\xd9\xa9\x2c\x84\xb5\x7e\x73\xc8\x20\x8e\x9f\x63\x14\x11\x9a\xd5\x7e\xb3\x86\x0c\x7a\xd7\xb6\xd2\x64\x71\x8f\x1f\xfc\x03\x59\x7b\xd2\x97\xce\xc4\x0d\xdc\x44\xb7\x67\xc8\xaf\x42\x4a\xe2\xff\xcb\x7d\x3c\x85\x78\x26\x2a\x35\xab\xff\xcc\x5a\xde\x14\xd8\x38\x7c\x88\xdb\x22\xe5\xfe\x04\x4d\x14\x6e\x69\x91\x5d\xb5\x56\x96\x91\xd0\xd8\x10\x79\x08\x48\xe4\xf9\xb2\x46\xe2\x01\x92\x8c\x65\xa1\xe4\xfb\x78\x1a\xce\x04\x09\xd6\xf7\x69\x3f\xf9\x3b\x3a\x17\xcd\xf7\xc9\x8a\x14\x87\x79\x8f\x36\x3a\xc6\x53\xa9\x26\xea\x98\x8b\xe8\x2b\x00\x00\xff\xff\x9e\x96\x76\x9c\x91\x02\x00\x00")

func uiAssetsIndexJsBytes() ([]byte, error) {
	return bindataRead(
		_uiAssetsIndexJs,
		"ui/assets/index.js",
	)
}

func uiAssetsIndexJs() (*asset, error) {
	bytes, err := uiAssetsIndexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ui/assets/index.js", size: 657, mode: os.FileMode(420), modTime: time.Unix(1532702451, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _uiAssetsStyleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xcf\x6e\xdb\x30\x0c\xc6\xef\x79\x0a\x22\xc3\x80\x6d\xb0\x02\xa5\x6b\x81\xc2\x3d\xed\x32\xec\xb4\xcb\x9e\x80\x96\x68\x9b\xa8\x2c\x1a\x92\xf2\xc7\x19\xfa\xee\x83\xe5\xb4\x75\x96\xe4\xd4\x9c\x12\x93\x1f\x7f\xfe\xf4\x99\xfa\x06\x7f\x17\x00\x95\xec\x55\xe4\x03\xfb\xa6\x84\x4a\x82\xa5\xa0\x2a\xd9\x3f\x2d\x5e\x16\x8b\x4a\xec\x90\x35\x1d\x7b\xd5\x12\x37\x6d\x2a\x61\xad\xf5\xe7\xa7\x05\x40\x2d\x3e\xa9\x1a\x3b\x76\x43\x09\xd8\xf7\x8e\x54\x1c\x62\xa2\xae\x80\xe5\x1f\xf4\xf0\x33\xa0\x37\x1c\x8d\x2c\x0b\x58\xfe\x22\xb7\xa5\xc4\x06\xe1\x37\x6d\x68\x59\xc0\x8f\xc0\xe8\x0a\x88\xe8\xa3\x8a\x14\xb8\x1e\x91\x6a\x47\xd5\x33\x27\x95\xd1\xb1\x13\x49\x6d\xb6\x85\x3e\x31\x3a\xc6\x48\x36\xcb\x3a\x39\x28\x89\xfb\x33\x5d\x13\x70\x88\x06\x1d\x8d\x2a\xd9\x52\xa8\x9d\xec\x4a\x68\xd9\x5a\xf2\xf3\x9a\x1a\x2d\x6f\x92\xfc\x5f\x1b\xff\x3b\x1c\xf2\xe1\x3f\x61\xdf\xe7\xc3\x5b\x8e\xbd\xc3\xa1\x84\xda\xd1\xfe\xe9\x3c\x8d\x6d\x7b\xe2\xdd\xd1\x5e\x59\x0e\x64\x12\x8b\x2f\x21\xc8\x6e\xf2\x1c\xaf\xb5\xae\x94\x7b\x89\x3c\x15\x62\xc2\xc4\x66\xac\xed\xd8\xa6\xf6\xf5\x13\x8c\x1e\x8d\xf8\x44\x3e\x5d\xf6\x39\xb7\x54\xc2\x7a\x6e\xe3\xf8\x38\xef\x1c\xc5\xe8\xb8\xf1\x8a\x13\x75\xb1\x04\x43\x3e\x51\x38\xf1\x9f\xfb\xf3\xce\xb5\x81\x13\xde\xd1\xe7\x45\xa2\x63\x4f\xaa\x47\xf3\x7c\x4e\xbd\x30\xf6\x1e\x4b\x20\x87\x89\xb7\xf9\x63\x1f\x14\x7b\x3b\x9e\xe5\x3e\x6b\xd0\xda\xbc\x10\x1a\xbe\xeb\x3e\x67\x91\x02\xfa\xd7\xc1\x0e\x43\xc3\x5e\x39\xaa\x13\xac\xee\x22\x10\x46\x52\xec\x95\x6c\xd2\x94\x6a\x40\x6f\xa5\x53\x1e\x3b\x9a\xd6\x3f\x0f\x8c\xb8\xd7\xa5\x99\x36\x8f\x0f\x54\xc2\xfd\xe3\xf4\x06\xe9\xd1\x70\x1a\x4a\xd0\x67\x90\x55\x6c\x65\xf7\x8e\x7b\x53\xae\xb5\x9e\x47\x35\xf7\x88\xce\xc1\x83\xd6\x5d\x04\xb3\xa9\xd8\xa8\x8a\x0e\x4c\xe1\x8b\x5e\xdd\xdf\xe9\x02\xf4\x4a\xeb\xfc\xf3\xf0\xa8\x0b\x58\x8f\x4f\x5f\xdf\x6e\xc6\x0d\x30\x72\x03\xc8\x0d\x6c\x9c\xe5\xa2\x12\x77\xec\x1b\x55\x6f\xfc\xf1\xb2\x7c\x20\x9d\x0f\xc2\xe4\x66\xa8\xdb\x70\x5e\xfe\x05\x00\x00\xff\xff\x19\xdc\x32\xa1\xcf\x05\x00\x00")

func uiAssetsStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_uiAssetsStyleCss,
		"ui/assets/style.css",
	)
}

func uiAssetsStyleCss() (*asset, error) {
	bytes, err := uiAssetsStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ui/assets/style.css", size: 1487, mode: os.FileMode(420), modTime: time.Unix(1532700515, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _uiIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x90\xbb\x4e\x03\x31\x10\x45\xfb\xfd\x8a\xd1\x54\x50\x24\x6e\x29\x6c\x97\xd0\x51\x20\xa8\xa3\xc1\x1e\xb2\x4e\xfc\x58\x79\x26\x81\xfc\x3d\xda\x47\x52\x59\xba\xf7\x58\x3e\xd7\x76\xd4\x92\x21\x53\x3d\x3a\xe4\x8a\x10\x32\x89\x38\xac\x6d\x77\x12\x08\xad\x9d\x13\x1f\x2e\xc2\xf1\xa0\xfd\xc2\xe8\x07\x3b\x32\x45\x3f\x00\x00\xd8\xc2\x4a\x10\x46\xea\xc2\xea\xf0\xeb\xf3\x75\xf7\x82\x5b\xa5\x49\x33\xfb\x77\x2a\x2c\xf0\xc6\x95\x3b\x69\xeb\xd6\xac\xf1\x8a\xe4\x54\xcf\xd0\x39\x3b\x14\xbd\x65\x96\x91\x59\x11\x0a\xc7\x44\x0e\x29\x67\x84\xb1\xf3\x8f\x43\x12\x61\x15\xb3\x40\xfb\x20\x82\xc6\x0f\xd6\xac\x1a\xf6\xbb\xc5\x9b\x1f\x6c\x4c\x57\x48\xd1\x21\x4d\xd3\xdd\xe0\x1e\x85\x56\x95\xab\x6e\xf1\x52\x4d\x4b\xd1\xa9\xc6\x56\x76\x95\x0a\x3f\x66\xcb\xd8\x7e\xb7\xa4\xd5\x90\x53\x38\x3b\x3c\xb2\x7e\x2c\xe8\xbc\xe6\xe9\x19\xbd\x35\xd3\xf6\x86\x89\xe9\x3a\xcb\xac\x87\x84\x9e\x26\x05\xe9\xe1\x21\x9d\x6a\xe4\xbf\xfd\x49\xe6\x4b\x6b\x3d\xe3\x9b\xb4\x99\xbf\xde\xff\x07\x00\x00\xff\xff\x0b\xef\x28\xa7\x81\x01\x00\x00")

func uiIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_uiIndexHtml,
		"ui/index.html",
	)
}

func uiIndexHtml() (*asset, error) {
	bytes, err := uiIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ui/index.html", size: 385, mode: os.FileMode(420), modTime: time.Unix(1532702464, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ui/assets/index.js":  uiAssetsIndexJs,
	"ui/assets/style.css": uiAssetsStyleCss,
	"ui/index.html":       uiIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ui": &bintree{nil, map[string]*bintree{
		"assets": &bintree{nil, map[string]*bintree{
			"index.js":  &bintree{uiAssetsIndexJs, map[string]*bintree{}},
			"style.css": &bintree{uiAssetsStyleCss, map[string]*bintree{}},
		}},
		"index.html": &bintree{uiIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
